@model NetworkLogsViewModel

<h1>Network Logs</h1>

<!-- Filter Form -->
<form method="get" class="mb-4">
    <div class="row">
        <div class="col-md-3">
            <input type="text" name="filterIpAddress" value="@Model.FilterIpAddress" 
                   class="form-control" placeholder="IP Address">
        </div>
        <div class="col-md-2">
            <select name="filterProtocol" class="form-control">
                <option value="">All Protocols</option>
                <option value="TCP" selected="@(Model.FilterProtocol == "TCP")">TCP</option>
                <option value="UDP" selected="@(Model.FilterProtocol == "UDP")">UDP</option>
                <option value="ICMP" selected="@(Model.FilterProtocol == "ICMP")">ICMP</option>
            </select>
        </div>
        <div class="col-md-2">
            <input type="date" name="filterStartDate" value="@Model.FilterStartDate?.ToString("yyyy-MM-dd")" 
                   class="form-control" placeholder="Start Date">
        </div>
        <div class="col-md-2">
            <input type="date" name="filterEndDate" value="@Model.FilterEndDate?.ToString("yyyy-MM-dd")" 
                   class="form-control" placeholder="End Date">
        </div>
        <div class="col-md-2">
            <select name="pageSize" class="form-control" onchange="this.form.submit()">
                <option value="10" selected="@(Model.PageSize == 10)">10 per page</option>
                <option value="50" selected="@(Model.PageSize == 50)">50 per page</option>
                <option value="100" selected="@(Model.PageSize == 100)">100 per page</option>
            </select>
        </div>
        <div class="col-md-1">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>

<!-- Logs Table -->
<table class="table table-striped table-sm">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>Source IP</th>
            <th>Destination IP</th>
            <th>Protocol</th>
            <th>Source Port</th>
            <th>Dest Port</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in Model.Logs)
        {
            <tr>
                <td>@log.LogOccurrence?.ToString("g")</td>
                <td>@log.SrcIp</td>
                <td>@log.DstIp</td>
                <td>@log.Protocol</td>
                <td>@log.SrcPort</td>
                <td>@log.DstPort</td>
                <td>@log.RuleType</td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.PageNumber > 1)
        {
            <li class="page-item">
                <a class="page-link" 
                   href="@Url.Action("Index", new { 
                       pageNumber = Model.PageNumber - 1, 
                       pageSize = Model.PageSize,
                       filterIpAddress = Model.FilterIpAddress,
                       filterProtocol = Model.FilterProtocol,
                       filterStartDate = Model.FilterStartDate,
                       filterEndDate = Model.FilterEndDate
                   })">Previous</a>
            </li>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                <a class="page-link" 
                   href="@Url.Action("Index", new { 
                       pageNumber = i, 
                       pageSize = Model.PageSize,
                       filterIpAddress = Model.FilterIpAddress,
                       filterProtocol = Model.FilterProtocol,
                       filterStartDate = Model.FilterStartDate,
                       filterEndDate = Model.FilterEndDate
                   })">@i</a>
            </li>
        }

        @if (Model.PageNumber < Model.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" 
                   href="@Url.Action("Index", new { 
                       pageNumber = Model.PageNumber + 1, 
                       pageSize = Model.PageSize,
                       filterIpAddress = Model.FilterIpAddress,
                       filterProtocol = Model.FilterProtocol,
                       filterStartDate = Model.FilterStartDate,
                       filterEndDate = Model.FilterEndDate
                   })">Next</a>
            </li>
        }
    </ul>
</nav>

<!-- Summary -->
<div class="text-muted">
    Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to 
    @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalRecords) of 
    @Model.TotalRecords records
</div>

@section Scripts {
    <script>
        let lastLogTime = '@(Model.Logs.FirstOrDefault()?.LogOccurrence?.ToString("o") ?? "")';

        function checkForNewLogs() {
            fetch(`/Networklogs/CheckNewLogs?lastLogTime=${lastLogTime}`)
                .then(response => response.json())
                .then(data => {
                    if (data.hasNewLogs) {
                        location.reload(); // Or update DOM dynamically
                    }
                });
        }

        // Check every 4 seconds
        setInterval(checkForNewLogs, 4000);
    </script>
}